"""
Process Manager for EVONY AUTO
Handles all automation processes and task execution
"""

import multiprocessing
import time
from actions.war_actions import join_war_sequence, continue_war_sequence, join_war_sequence_no_general
from utils.adb_utils import set_device
from actions.rally import auto_join_rally, auto_join_advanced_rally_with_boss_selection
from actions.market_actions import auto_buy_meat
from actions.open_items_actions import open_items_sequence, open_items_selective_sequence

# Import cho attack boss
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from actions.user_interface import get_boss_selection, display_boss_list
from actions.get_location_boss import get_boss_locations, save_to_json
from actions.boss_data_manager import load_boss_data, group_bosses_by_name
from actions.boss_attacker import attack_selected_bosses


def run_single_task_process(task, task_index, total_tasks, log_queue):
    """H√†m ch·∫°y trong process con - kh√¥ng c√≥ GUI"""
    try:
        device = task['device']
        feature_code = task['feature_code']
        feature_name = task['feature_name']
        device_id = device['device_id']
        
        
        log_queue.put(f"üîÑ [Task {task_index}/{total_tasks}] B·∫Øt ƒë·∫ßu {feature_name} tr√™n {device['name']} (Device ID: {device_id})")
        
        # Thi·∫øt l·∫≠p device
        set_device(device_id)
        
        # Ch·∫°y feature t∆∞∆°ng ·ª©ng
        if feature_code == "1":
            run_rally_direct_process(device_id, use_general=True, log_queue=log_queue)
        elif feature_code == "2":
            run_buy_meat_direct_process(device_id, log_queue=log_queue)
        elif feature_code == "3":
            run_rally_direct_process(device_id, use_general=False, log_queue=log_queue)
        elif feature_code == "4":
            # Get troops_count from task for attack_boss
            troops_count = task.get('troops_count', 1000)  # Default fallback
            run_attack_boss_direct_process(device_id, log_queue=log_queue, troops_count=troops_count)
        elif feature_code == "5":
            run_open_items_direct_process(device_id, log_queue=log_queue)
        elif feature_code == "6":
            # Advanced Rally
            selected_bosses = task.get('selected_bosses', [])
            run_advanced_rally_direct_process(device_id, log_queue=log_queue, selected_bosses=selected_bosses)
        elif feature_code == "7":
            # Advanced War
            selected_bosses = task.get('selected_bosses', [])
            run_advanced_war_direct_process(device_id, log_queue=log_queue, selected_bosses=selected_bosses)
        
        log_queue.put(f"‚úÖ [Task {task_index}/{total_tasks}] Ho√†n th√†nh {feature_name} tr√™n {device['name']}")
            
    except Exception as e:
        log_queue.put(f"‚ùå L·ªói nghi√™m tr·ªçng trong task {task_index}: {e}")


def run_rally_direct_process(device_id, use_general=True, log_queue=None):
    """Ch·∫°y auto_join_rally trong process con"""
    try:
        if log_queue:
            log_queue.put(f"‚öîÔ∏è B·∫Øt ƒë·∫ßu auto rally tr√™n device {device_id}")
        auto_join_rally(device_id, use_general)
    except Exception as e:
        if log_queue:
            log_queue.put(f"‚ùå L·ªói khi ch·∫°y auto rally tr√™n {device_id}: {e}")


def run_buy_meat_direct_process(device_id, log_queue=None):
    """Ch·∫°y auto_buy_meat trong process con"""
    try:
        if log_queue:
            log_queue.put(f"üõí B·∫Øt ƒë·∫ßu auto buy meat tr√™n device {device_id}")
        auto_buy_meat(device_id)
    except Exception as e:
        if log_queue:
            log_queue.put(f"‚ùå L·ªói khi ch·∫°y auto buy meat tr√™n {device_id}: {e}")


def run_attack_boss_direct_process(device_id, log_queue=None, troops_count=1000):
    """Ch·∫°y attack_boss trong process con v·ªõi v√≤ng l·∫∑p v√¥ h·∫°n gi·ªëng attack_boss.py"""
    try:
        if log_queue:
            log_queue.put(f"üëπ B·∫Øt ƒë·∫ßu t·∫•n c√¥ng boss tr√™n device {device_id} v·ªõi {troops_count} qu√¢n")
        
        # Import h√†m t·ª´ get_location_boss (file c≈©, an to√†n)
        from actions.get_location_boss import get_boss_locations, save_to_json
        
        # L∆∞u danh s√°ch t√™n boss ƒë∆∞·ª£c ch·ªçn ban ƒë·∫ßu
        selected_boss_names = set()
        initial_selection = None
        
        while True:  # V√≤ng l·∫∑p ch√≠nh ƒë·ªÉ c·∫≠p nh·∫≠t boss (v√¥ h·∫°n)
            try:
                # B∆∞·ªõc 1: C·∫≠p nh·∫≠t v·ªã tr√≠ boss t·ª´ thi·∫øt b·ªã
                if log_queue:
                    log_queue.put(f"üì° ƒêang c·∫≠p nh·∫≠t v·ªã tr√≠ boss t·ª´ thi·∫øt b·ªã {device_id}...")
                
                # S·ª≠ d·ª•ng h√†m t·ª´ get_location_boss (file c≈©, an to√†n)
                if log_queue:
                    log_queue.put("üîç ƒêang g·ªçi get_boss_locations()...")
                bosses = get_boss_locations()
                
                if log_queue:
                    log_queue.put(f"üìä K·∫øt qu·∫£ get_boss_locations(): {type(bosses)} - {len(bosses) if bosses else 0} boss")
                
                if not bosses:
                    if log_queue:
                        log_queue.put("‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin boss! Th·ª≠ l·∫°i sau 60 gi√¢y.")
                    time.sleep(60)
                    continue
                    
                # L∆∞u th√¥ng tin boss v√†o file
                if not save_to_json(bosses, device_id=device_id):
                    if log_queue:
                        log_queue.put("‚ùå Kh√¥ng th·ªÉ l∆∞u th√¥ng tin boss v√†o file!")
                    time.sleep(60)
                    continue
                
                # B∆∞·ªõc 2: X·ª≠ l√Ω l·ª±a ch·ªçn boss
                if not selected_boss_names:  # N·∫øu ch∆∞a c√≥ l·ª±a ch·ªçn ban ƒë·∫ßu
                    # T·ª± ƒë·ªông ch·ªçn t·∫•t c·∫£ boss c√≥ s·∫µn
                    boss_groups = group_bosses_by_name(bosses)
                    initial_selection = []
                    
                    for boss_name, boss_group in boss_groups.items():
                        initial_selection.append(boss_group)
                        selected_boss_names.add(boss_name)
                    
                    if not initial_selection:
                        if log_queue:
                            log_queue.put("‚ùå Kh√¥ng c√≥ boss n√†o ƒë·ªÉ t·∫•n c√¥ng!")
                        time.sleep(60)
                        continue
                    
                    if log_queue:
                        log_queue.put(f"‚úÖ ƒê√£ t·ª± ƒë·ªông ch·ªçn {len(initial_selection)} lo·∫°i boss ƒë·ªÉ t·∫•n c√¥ng")
                else:  # ƒê√£ c√≥ l·ª±a ch·ªçn tr∆∞·ªõc ƒë√≥, t·∫°o l·∫°i initial_selection t·ª´ d·ªØ li·ªáu boss m·ªõi
                    boss_groups = group_bosses_by_name(bosses)
                    initial_selection = []
                    for name in selected_boss_names:
                        if name in boss_groups:
                            initial_selection.append(boss_groups[name])
                
                # B∆∞·ªõc 3: B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p t·∫•n c√¥ng
                start_time = time.time()
                while True:
                    # Ki·ªÉm tra s·ªë boss ch∆∞a t·∫•n c√¥ng v√† hi·ªÉn th·ªã th√¥ng tin
                    unattacked_count = sum(1 for group in initial_selection
                                         for _, boss in group
                                         if not boss.get('attacked', 0))
                    
                    remaining_time = int(1800 - (time.time() - start_time))  # 30 ph√∫t = 1800 gi√¢y
                    if log_queue:
                        log_queue.put(f"‚è±Ô∏è C√≤n {unattacked_count} boss, th·ªùi gian: {remaining_time}s")
                    
                    # Th·ª±c hi·ªán t·∫•n c√¥ng c√°c boss ƒë√£ ch·ªçn v·ªõi troops_count t·ª´ UI
                    result = attack_selected_bosses(initial_selection, bosses, start_time, troops_count)
                    
                    # Ki·ªÉm tra k·∫øt qu·∫£
                    if result == "update_required" or remaining_time <= 0:
                        if log_queue:
                            log_queue.put("‚è∞ ƒê√£ ƒë·ªß 30 ph√∫t, c·∫≠p nh·∫≠t l·∫°i v·ªã tr√≠ boss...")
                        break  # Tho√°t v√≤ng l·∫∑p t·∫•n c√¥ng ƒë·ªÉ c·∫≠p nh·∫≠t boss
                    elif unattacked_count == 0:
                        if log_queue:
                            log_queue.put("üéØ ƒê√£ h·∫øt boss, c·∫≠p nh·∫≠t l·∫°i v·ªã tr√≠ boss...")
                        break  # Tho√°t v√≤ng l·∫∑p t·∫•n c√¥ng ƒë·ªÉ c·∫≠p nh·∫≠t boss
                    
                    time.sleep(1)
                
            except Exception as e:
                if log_queue:
                    log_queue.put(f"‚ùå L·ªói: {e}")
                    log_queue.put("Th·ª≠ l·∫°i sau 1 ph√∫t...")
                time.sleep(60)
                 
    except Exception as e:
        if log_queue:
            log_queue.put(f"‚ùå L·ªói nghi√™m tr·ªçng khi t·∫•n c√¥ng boss tr√™n {device_id}: {e}")


def run_open_items_direct_process(device_id, log_queue=None):
    """Ch·∫°y open_items trong process con"""
    try:
        if log_queue:
            log_queue.put(f"üì¶ B·∫Øt ƒë·∫ßu auto open items tr√™n device {device_id}")
        
        # Ch·∫°y v√≤ng l·∫∑p v√¥ h·∫°n ƒë·ªÉ m·ªü items li√™n t·ª•c
        while True:
            try:
                # Th·ª±c hi·ªán chu·ªói m·ªü items
                if open_items_sequence(device_id):
                    if log_queue:
                        log_queue.put(f"‚úÖ Ho√†n th√†nh m·ªôt l∆∞·ª£t m·ªü items tr√™n {device_id}")
                else:
                    if log_queue:
                        log_queue.put(f"‚ö†Ô∏è Kh√¥ng th·ªÉ m·ªü items tr√™n {device_id}, th·ª≠ l·∫°i sau...")
                
                # Ch·ªù m·ªôt ch√∫t tr∆∞·ªõc khi th·ª≠ l·∫°i
                time.sleep(5)
                
            except Exception as e:
                if log_queue:
                    log_queue.put(f"‚ùå L·ªói khi m·ªü items tr√™n {device_id}: {e}")
                time.sleep(10)  # Ch·ªù l√¢u h∆°n khi c√≥ l·ªói
                
    except Exception as e:
        if log_queue:
            log_queue.put(f"‚ùå L·ªói nghi√™m tr·ªçng khi m·ªü items tr√™n {device_id}: {e}")

def run_advanced_rally_direct_process(device_id, log_queue=None, selected_bosses=None):
    """Ch·∫°y Advanced Rally v·ªõi boss selection trong process con"""
    try:
        if log_queue:
            log_queue.put(f"üéØ B·∫Øt ƒë·∫ßu Advanced Rally tr√™n device {device_id}")
            log_queue.put(f"üìã Selected bosses: {selected_bosses}")
            log_queue.put(f"üîç Debug: selected_bosses type: {type(selected_bosses)}, length: {len(selected_bosses) if selected_bosses else 0}")
        
        # Ki·ªÉm tra selected_bosses
        if not selected_bosses:
            if log_queue:
                log_queue.put("‚ö†Ô∏è Kh√¥ng c√≥ boss n√†o ƒë∆∞·ª£c ch·ªçn, s·ª≠ d·ª•ng logic Basic Rally")
            # Fallback to Basic Rally if no bosses selected
            from actions.rally import auto_join_rally
            auto_join_rally(device_id, use_general=True)
        else:
            # G·ªçi function Advanced Rally
            auto_join_advanced_rally_with_boss_selection(device_id, use_general=True, selected_bosses=selected_bosses)
        
        if log_queue:
            log_queue.put(f"‚úÖ Ho√†n th√†nh Advanced Rally tr√™n device {device_id}")
    except Exception as e:
        if log_queue:
            log_queue.put(f"‚ùå L·ªói khi ch·∫°y Advanced Rally tr√™n {device_id}: {e}")

def run_advanced_war_direct_process(device_id, log_queue=None, selected_bosses=None):
    """Ch·∫°y Advanced War v·ªõi boss selection trong process con"""
    try:
        if log_queue:
            log_queue.put(f"üéØ B·∫Øt ƒë·∫ßu Advanced War tr√™n device {device_id}")
            log_queue.put(f"üìã Selected bosses: {selected_bosses}")
            log_queue.put(f"üîç Debug: selected_bosses type: {type(selected_bosses)}, length: {len(selected_bosses) if selected_bosses else 0}")
        
        # Ki·ªÉm tra selected_bosses
        if not selected_bosses:
            if log_queue:
                log_queue.put("‚ö†Ô∏è Kh√¥ng c√≥ boss n√†o ƒë∆∞·ª£c ch·ªçn, s·ª≠ d·ª•ng logic Basic Rally")
            # Fallback to Basic Rally if no bosses selected
            from actions.rally import auto_join_rally
            auto_join_rally(device_id, use_general=False)
        else:
            # G·ªçi function Advanced Rally (kh√¥ng ch·ªçn t∆∞·ªõng)
            auto_join_advanced_rally_with_boss_selection(device_id, use_general=False, selected_bosses=selected_bosses)
        
        if log_queue:
            log_queue.put(f"‚úÖ Ho√†n th√†nh Advanced War tr√™n device {device_id}")
    except Exception as e:
        if log_queue:
            log_queue.put(f"‚ùå L·ªói khi ch·∫°y Advanced War tr√™n {device_id}: {e}")
