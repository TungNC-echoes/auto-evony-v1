"""
Advanced War Actions - X·ª≠ l√Ω logic cho Advanced Rally v·ªõi boss selection
"""
import time
import cv2
import numpy as np
import os
from utils.adb_utils import take_screenshot, tap_screen, swipe_down, swipe_up, get_screen_size

def get_boss_image_path(boss_name, language="en"):
    """Get path to boss image"""
    return f"images/{language}/buttons/rally_advance_boss/{boss_name}.JPG"

def get_button_image_path(button_name, language="en"):
    """Get path to button image"""
    return f"images/{language}/buttons/{button_name}.JPG"

def find_all_boss_positions(selected_bosses, device_id):
    """
    T√¨m t·∫•t c·∫£ v·ªã tr√≠ c·ªßa c√°c boss ƒë∆∞·ª£c ch·ªçn trong screenshot hi·ªán t·∫°i
    Tr·∫£ v·ªÅ list c√°c tuple (x, y, width, height, boss_name)
    """
    try:
        import os
        import cv2
        from utils.adb_utils import take_screenshot
        
        print(f"üîç T√¨m t·∫•t c·∫£ boss trong {len(selected_bosses)} boss ƒë∆∞·ª£c ch·ªçn")
        
        # Ch·ª•p screenshot
        screenshot_filename = f"current_screen_{device_id.replace(':', '_')}.JPG"
        if not take_screenshot(screenshot_filename, device_id):
            print("‚ùå Kh√¥ng th·ªÉ ch·ª•p screenshot")
            return []
        
        # Load screenshot
        device_folder = f"images/device_{device_id.replace(':', '_')}"
        screenshot_path = os.path.join(device_folder, screenshot_filename)
        
        if not os.path.exists(screenshot_path):
            print(f"‚ùå File screenshot kh√¥ng t·ªìn t·∫°i: {screenshot_path}")
            return []
        
        screenshot = cv2.imread(screenshot_path)
        if screenshot is None:
            print(f"‚ùå Kh√¥ng th·ªÉ ƒë·ªçc screenshot: {screenshot_path}")
            return []
        
        found_bosses = []
        
        # T√¨m t·∫•t c·∫£ boss ƒë∆∞·ª£c ch·ªçn trong 1 l·∫ßn duy·ªát
        for boss_name in selected_bosses:
            print(f"üîç T√¨m ki·∫øm boss: {boss_name}")
            
            # L·∫•y ƒë∆∞·ªùng d·∫´n ·∫£nh boss
            boss_image_path = get_boss_image_path(boss_name)
            if not os.path.exists(boss_image_path):
                print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ·∫£nh boss: {boss_name}")
                continue
            
            # Load boss template
            boss_template = cv2.imread(boss_image_path)
            if boss_template is None:
                print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh boss: {boss_name}")
                continue
            
            # Template matching v·ªõi threshold th·∫•p ƒë·ªÉ t√¨m t·∫•t c·∫£ occurrences
            result = cv2.matchTemplate(screenshot, boss_template, cv2.TM_CCOEFF_NORMED)
            threshold = 0.7  # Threshold cao h∆°n ƒë·ªÉ tr√°nh l·∫´n l·ªôn
            
            # Debug: Hi·ªÉn th·ªã max confidence
            min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)
            print(f"üîç Boss '{boss_name}': Max confidence = {max_val:.3f}, Threshold = {threshold}")
            
            # T√¨m t·∫•t c·∫£ locations
            locations = np.where(result >= threshold)
            locations = list(zip(*locations[::-1]))
            
            # L·ªçc c√°c locations qu√° g·∫ßn nhau (duplicate detection)
            filtered_locations = []
            for loc in locations:
                x, y = loc
                # Ki·ªÉm tra xem location n√†y c√≥ qu√° g·∫ßn v·ªõi locations ƒë√£ c√≥ kh√¥ng
                too_close = False
                for existing in filtered_locations:
                    if abs(x - existing[0]) < 50 and abs(y - existing[1]) < 50:
                        too_close = True
                        break
                
                if not too_close:
                    h, w = boss_template.shape[:2]
                    # Th√™m v√†o filtered_locations tr∆∞·ªõc
                    filtered_locations.append((x, y, w, h, boss_name))
                    # Th√™m boss_name v√†o tuple
                    found_bosses.append((x, y, w, h, boss_name))
                    print(f"‚úÖ T√¨m th·∫•y {boss_name} t·∫°i ({x}, {y})")
        
        print(f"üìä T·ªïng c·ªông t√¨m th·∫•y {len(found_bosses)} boss")
        return found_bosses
        
    except Exception as e:
        print(f"‚ùå L·ªói khi t√¨m boss: {e}")
        return []


# H√†m ch√≠nh x·ª≠ l√Ω boss
def find_all_bosses_and_process(selected_bosses, device_id, use_general=True):
    """
    T√¨m t·∫•t c·∫£ boss v√† x·ª≠ l√Ω theo th·ª© t·ª±
    L∆∞u t·ªça ƒë·ªô boss v√†o m·∫£ng v·ªõi tr·∫°ng th√°i attacked
    X√≥a m·∫£ng boss c≈© v√† t·∫°o m·∫£ng m·ªõi sau m·ªói l·∫ßn scroll
    """
    try:
        from utils.adb_utils import tap_screen
        import os
        import time
        
        print(f"üîç T√¨m t·∫•t c·∫£ boss trong {len(selected_bosses)} boss ƒë∆∞·ª£c ch·ªçn")
        
        # X√≥a m·∫£ng boss c≈© v√† t·∫°o m·∫£ng m·ªõi
        boss_array = []
        print("üóëÔ∏è X√≥a m·∫£ng boss c≈©, t·∫°o m·∫£ng m·ªõi...")
        
        # T√¨m t·∫•t c·∫£ boss ƒë∆∞·ª£c ch·ªçn v√† l∆∞u v√†o m·∫£ng
        boss_positions = find_all_boss_positions(selected_bosses, device_id)
        
        for i, boss_position in enumerate(boss_positions):
            boss_x, boss_y, boss_width, boss_height, boss_name = boss_position
            print(f"‚úÖ T√¨m th·∫•y {boss_name} #{i+1} t·∫°i ({boss_x}, {boss_y})")
            
            # L∆∞u v√†o m·∫£ng v·ªõi tr·∫°ng th√°i attacked = 0
            boss_info = {
                'name': boss_name,  # S·ª≠ d·ª•ng t√™n boss th·ª±c
                'x': boss_x,
                'y': boss_y,
                'width': boss_width,
                'height': boss_height,
                'attacked': 0  # 0 = ch∆∞a t·∫•n c√¥ng, 1 = ƒë√£ t·∫•n c√¥ng
            }
            boss_array.append(boss_info)
        
        print(f"üìä T·ªïng c·ªông t√¨m th·∫•y {len(boss_array)} boss")
        
        # X·ª≠ l√Ω t·ª´ng boss trong m·∫£ng
        for i, boss_info in enumerate(boss_array):
            print(f"üéØ X·ª≠ l√Ω boss {boss_info['name']} #{i+1} t·∫°i ({boss_info['x']}, {boss_info['y']})")
            
            # Ki·ªÉm tra xem boss ƒë√£ ƒë∆∞·ª£c join ch∆∞a
            if check_boss_joined_status(boss_info['x'], boss_info['y'], boss_info['width'], boss_info['height'], device_id):
                print(f"‚è≠Ô∏è Boss {boss_info['name']} #{i+1} ƒë√£ ƒë∆∞·ª£c join, ƒë√°nh d·∫•u ƒë√£ x·ª≠ l√Ω")
                boss_info['attacked'] = 1  # ƒê√°nh d·∫•u ƒë√£ x·ª≠ l√Ω (kh√¥ng c·∫ßn t·∫•n c√¥ng n·ªØa)
                continue
            
            # T√¨m join button ngay d∆∞·ªõi boss
            join_button_pos = find_join_button_below_boss(boss_info['x'], boss_info['y'], boss_info['width'], boss_info['height'], device_id)
            if join_button_pos:
                join_x, join_y = join_button_pos
                print(f"‚úÖ T√¨m th·∫•y join button cho boss {boss_info['name']} #{i+1} t·∫°i ({join_x}, {join_y})")
                
                # Click v√†o join button
                print(f"üñ±Ô∏è Click join button t·∫°i ({join_x}, {join_y})")
                if tap_screen(join_x, join_y):
                    print(f"‚úÖ ƒê√£ click join button cho boss {boss_info['name']} #{i+1}")
                    boss_info['attacked'] = 1  # ƒê√°nh d·∫•u ƒë√£ t·∫•n c√¥ng
                    time.sleep(2)  # Ch·ªù animation
                    
                    # Th·ª±c hi·ªán war sequence sau khi click join button
                    print("‚öîÔ∏è B·∫Øt ƒë·∫ßu war sequence sau khi click join button...")
                    from actions.war_actions_advanced import join_advanced_war_sequence, join_advanced_war_sequence_no_general

                    # S·ª≠ d·ª•ng use_general parameter

                    if use_general:
                        if join_advanced_war_sequence(device_id, selected_bosses):
                            print("‚úÖ ƒê√£ ho√†n th√†nh war sequence v·ªõi t∆∞·ªõng")
                            return True
                        else:
                            print("‚ùå Kh√¥ng th·ªÉ ho√†n th√†nh war sequence v·ªõi t∆∞·ªõng")
                            return False
                    else:
                        if join_advanced_war_sequence_no_general(device_id, selected_bosses):
                            print("‚úÖ ƒê√£ ho√†n th√†nh war sequence kh√¥ng t∆∞·ªõng")
                            return True
                        else:
                            print("‚ùå Kh√¥ng th·ªÉ ho√†n th√†nh war sequence kh√¥ng t∆∞·ªõng")
                            return False
                else:
                    print(f"‚ùå Kh√¥ng th·ªÉ click join button cho boss {boss_info['name']} #{i+1}")
                    # ƒê√°nh d·∫•u ƒë√£ x·ª≠ l√Ω ƒë·ªÉ kh√¥ng ki·ªÉm tra l·∫°i boss n√†y
                    boss_info['attacked'] = 1
            else:
                print(f"‚ùå Kh√¥ng t√¨m th·∫•y join button cho boss {boss_info['name']} #{i+1}")
                # ƒê√°nh d·∫•u ƒë√£ x·ª≠ l√Ω ƒë·ªÉ kh√¥ng ki·ªÉm tra l·∫°i boss n√†y
                boss_info['attacked'] = 1
        
        # Ki·ªÉm tra xem c√≤n boss n√†o ch∆∞a t·∫•n c√¥ng kh√¥ng
        remaining_bosses = [boss for boss in boss_array if boss['attacked'] == 0]
        if remaining_bosses:
            print(f"‚ö†Ô∏è C√≤n {len(remaining_bosses)} boss ch∆∞a th·ªÉ t·∫•n c√¥ng")
        else:
            print("‚úÖ ƒê√£ x·ª≠ l√Ω h·∫øt t·∫•t c·∫£ boss c√≥ th·ªÉ t·∫•n c√¥ng")
        
        # N·∫øu h·∫øt boss ho·∫∑c ƒë√£ attacked h·∫øt th√¨ c·∫ßn scroll v√† x√≥a m·∫£ng c≈©
        if len(boss_array) == 0 or len(remaining_bosses) == 0:
            print("üîÑ H·∫øt boss ho·∫∑c ƒë√£ attacked h·∫øt, c·∫ßn scroll v√† x√≥a m·∫£ng c≈©...")
            return "scroll_needed"  # Signal ƒë·ªÉ scroll v√† t√¨m boss m·ªõi
        
        return False  # Kh√¥ng t√¨m th·∫•y boss n√†o c√≥ th·ªÉ tham gia
        
    except Exception as e:
        print(f"‚ùå L·ªói trong find_all_bosses_and_process: {e}")
        return False

# T√¨m button d∆∞·ªõi v·ªã tr√≠ boss xu·∫•t hi·ªán (h·ªó tr·ª£ join v√† joined)
def find_button_position_advanced(button_image_path, device_id=None, threshold = 0.75):
    """
    T√¨m v·ªã tr√≠ button v·ªõi threshold 85% cho Advanced Rally
    Kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn utils chung
    """
    try:
        from utils.image_utils import get_screenshot_filename
        from utils.adb_utils import take_screenshot
        import os
        
        # ƒê·ªçc ·∫£nh m·∫´u
        template = cv2.imread(button_image_path)
        if template is None:
            print(f"Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh m·∫´u: {button_image_path}")
            return None
            
        # Ch·ª•p m√†n h√¨nh hi·ªán t·∫°i
        screenshot_filename = get_screenshot_filename(device_id)
        take_screenshot(screenshot_filename, device_id)
        
        # X√°c ƒë·ªãnh ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß c·ªßa file screenshot
        if device_id:
            screen_path = os.path.join("images", f"device_{device_id.replace(':', '_')}", screenshot_filename)
        else:
            screen_path = os.path.join("images", screenshot_filename)
            
        screen = cv2.imread(screen_path)
        if screen is None:
            print(f"Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh m√†n h√¨nh: {screen_path}")
            return None
            
        # T√¨m ki·∫øm template trong ·∫£nh m√†n h√¨nh
        result = cv2.matchTemplate(screen, template, cv2.TM_CCOEFF_NORMED)
        min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)
        
        # Ki·ªÉm tra ƒë·ªô ch√≠nh x√°c v·ªõi threshold 85%
        if max_val >= threshold:
            # T√≠nh to√°n v·ªã tr√≠ v√† k√≠ch th∆∞·ªõc
            x = max_loc[0]
            y = max_loc[1]
            width = template.shape[1]
            height = template.shape[0]
            
            return (x, y, width, height)
        
        return None
        
    except Exception as e:
        print(f"L·ªói trong find_button_position_advanced: {e}")
        return None

# Tham gia t·∫•n c√¥ng boss c√≥ ch·ªçn t∆∞·ªõng
def join_advanced_war_sequence(device_id=None, selected_bosses=None):
    """
    Th·ª±c hi·ªán chu·ªói h√†nh ƒë·ªông tham gia chi·∫øn tranh v·ªõi boss selection
    D·ª±a tr√™n join_war_sequence() nh∆∞ng thay th·∫ø find_join_button_with_scroll() b·∫±ng find_and_click_boss_join_button()
    """
    try:
        # Join button ƒë√£ ƒë∆∞·ª£c click trong rally.py, b·ªè qua b∆∞·ªõc n√†y
        print("‚úÖ Join button ƒë√£ ƒë∆∞·ª£c click, ti·∫øp t·ª•c war sequence...")

        # Th·ª±c hi·ªán chu·ªói buttons (b·ªè qua join_button v√¨ ƒë√£ click r·ªìi)
        from actions.war_actions import click_button_sequence
        # Sequence b·ªè qua join_button v√¨ ƒë√£ click r·ªìi
        ADVANCED_WAR_BUTTONS_SEQUENCE = [
            ("doi_quan_san_co", 1),   # N√∫t ƒë·ªïi qu√¢n s√¢n c·ªè, ch·ªù 1 gi√¢y
            ("chon_tuong", 1),        # N√∫t ch·ªçn t∆∞·ªõng, ch·ªù 1 gi√¢y
            ("chon", 1),              # N√∫t ch·ªçn, ch·ªù 1 gi√¢y
            ("hanh_quan", 1)          # N√∫t h√†nh qu√¢n, ch·ªù 1 gi√¢y
        ]

        if not click_button_sequence(ADVANCED_WAR_BUTTONS_SEQUENCE, device_id, "advanced war sequence"):
            return False

        # B√°o ho√†n th√†nh ngay sau khi click hanh_quan
        print("‚úÖ ƒê√£ ho√†n th√†nh chu·ªói h√†nh ƒë·ªông tham gia chi·∫øn tranh")

        # Ki·ªÉm tra v√† x·ª≠ l√Ω tr∆∞·ªùng h·ª£p kh√¥ng ƒë·ªß th·ªÉ l·ª±c (gi·ªØ nguy√™n logic c≈©)
        from actions.war_actions import check_and_handle_insufficient_stamina
        stamina_result = check_and_handle_insufficient_stamina(device_id)

        # N·∫øu kh√¥ng c√≥ v·∫•n ƒë·ªÅ v·ªÅ th·ªÉ l·ª±c, b√°o ho√†n th√†nh
        if stamina_result:
            print("‚úÖ Ho√†n th√†nh 1 l∆∞·ª£t tham gia chi·∫øn tranh th√†nh c√¥ng")
            return True
        else:
            print("‚ö†Ô∏è C√≥ v·∫•n ƒë·ªÅ v·ªÅ th·ªÉ l·ª±c nh∆∞ng ƒë√£ x·ª≠ l√Ω")
            return True

    except Exception as e:
        print(f"‚ùå L·ªói trong qu√° tr√¨nh tham gia advanced war: {e}")
        return False

# Tham gia t·∫•n c√¥ng boss kh√¥ng ch·ªçn t∆∞·ªõng
def join_advanced_war_sequence_no_general(device_id=None, selected_bosses=None):
    """
    Th·ª±c hi·ªán chu·ªói h√†nh ƒë·ªông tham gia chi·∫øn tranh v·ªõi boss selection (kh√¥ng ch·ªçn t∆∞·ªõng)
    """
    try:
        # Join button ƒë√£ ƒë∆∞·ª£c click trong rally.py, b·ªè qua b∆∞·ªõc n√†y
        print("‚úÖ Join button ƒë√£ ƒë∆∞·ª£c click, ti·∫øp t·ª•c war sequence...")
        
        # Th·ª±c hi·ªán chu·ªói buttons (kh√¥ng ch·ªçn t∆∞·ªõng, b·ªè qua join_button v√¨ ƒë√£ click r·ªìi)
        from actions.war_actions import click_button_sequence
        # Sequence b·ªè qua join_button v√¨ ƒë√£ click r·ªìi
        ADVANCED_WAR_BUTTONS_SEQUENCE_NO_GENERAL = [
            ("doi_quan_san_co", 1),   # N√∫t ƒë·ªïi qu√¢n s√¢n c·ªè, ch·ªù 1 gi√¢y
            ("hanh_quan", 1)          # N√∫t h√†nh qu√¢n, ch·ªù 1 gi√¢y
        ]
        
        if not click_button_sequence(ADVANCED_WAR_BUTTONS_SEQUENCE_NO_GENERAL, device_id, "advanced war sequence no general"):
            return False
        
        # B√°o ho√†n th√†nh ngay sau khi click hanh_quan
        print("‚úÖ ƒê√£ ho√†n th√†nh chu·ªói h√†nh ƒë·ªông tham gia chi·∫øn tranh (kh√¥ng ch·ªçn t∆∞·ªõng)")
        
        # Ki·ªÉm tra v√† x·ª≠ l√Ω tr∆∞·ªùng h·ª£p kh√¥ng ƒë·ªß th·ªÉ l·ª±c
        from actions.war_actions import check_and_handle_insufficient_stamina
        stamina_result = check_and_handle_insufficient_stamina(device_id)
        
        # N·∫øu kh√¥ng c√≥ v·∫•n ƒë·ªÅ v·ªÅ th·ªÉ l·ª±c, b√°o ho√†n th√†nh
        if stamina_result:
            print("‚úÖ Ho√†n th√†nh 1 l∆∞·ª£t tham gia chi·∫øn tranh th√†nh c√¥ng (kh√¥ng ch·ªçn t∆∞·ªõng)")
            return True
        else:
            print("‚ö†Ô∏è C√≥ v·∫•n ƒë·ªÅ v·ªÅ th·ªÉ l·ª±c nh∆∞ng ƒë√£ x·ª≠ l√Ω")
            return True
        
    except Exception as e:
        print(f"‚ùå L·ªói trong qu√° tr√¨nh tham gia advanced war (no general): {e}")
        return False

# T√¨m button joined d∆∞·ªõi boss, n·∫øu c√≥ th√¨ update status attacked = 1
def check_boss_joined_status(boss_x, boss_y, boss_width, boss_height, device_id):
    """
    Ki·ªÉm tra xem boss ƒë√£ ƒë∆∞·ª£c join ch∆∞a b·∫±ng c√°ch t√¨m button "joined" ngay d∆∞·ªõi boss
    """
    try:
        import os
        import cv2
        from utils.adb_utils import take_screenshot
        # find_button_position_advanced ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a trong file n√†y
        
        # Ch·ª•p screenshot
        screenshot_filename = f"current_screen_{device_id.replace(':', '_')}.JPG"
        if not take_screenshot(screenshot_filename, device_id):
            print("‚ùå Kh√¥ng th·ªÉ ch·ª•p screenshot")
            return False
        
        # Load screenshot
        device_folder = f"images/device_{device_id.replace(':', '_')}"
        screenshot_path = os.path.join(device_folder, screenshot_filename)
        
        if not os.path.exists(screenshot_path):
            print(f"‚ùå File screenshot kh√¥ng t·ªìn t·∫°i: {screenshot_path}")
            return False
        
        screenshot = cv2.imread(screenshot_path)
        if screenshot is None:
            print(f"‚ùå Kh√¥ng th·ªÉ ƒë·ªçc screenshot: {screenshot_path}")
            return False
        
        # T√¨m button "joined" trong v√πng ngay d∆∞·ªõi boss
        search_region = get_search_region_below_boss(boss_x, boss_y, boss_width, boss_height, screenshot)
        if search_region is None:
            return False
        
        # T√¨m button "joined" trong v√πng t√¨m ki·∫øm
        joined_button_path = get_button_image_path("joined_button")
        if not os.path.exists(joined_button_path):
            print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ·∫£nh joined_button")
            return False
        
        # T√¨m button "joined" trong v√πng t√¨m ki·∫øm (gi·ªëng find_join_button_below_boss)
        joined_template = cv2.imread(joined_button_path)
        if joined_template is None:
            print("‚ö†Ô∏è Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh joined_button")
            return False
        
        # Template matching trong v√πng t√¨m ki·∫øm
        result = cv2.matchTemplate(search_region, joined_template, cv2.TM_CCOEFF_NORMED)
        min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)
        
        if max_val >= 0.75:
            print(f"‚úÖ T√¨m th·∫•y joined button, boss ƒë√£ ƒë∆∞·ª£c join (ƒë·ªô ch√≠nh x√°c: {max_val:.2f})")
            return True
        else:
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y joined button, boss ch∆∞a ƒë∆∞·ª£c join (ƒë·ªô ch√≠nh x√°c cao nh·∫•t: {max_val:.2f})")
            return False
        
    except Exception as e:
        print(f"‚ùå L·ªói trong check_boss_joined_status: {e}")
        return False

# T√¨m button join d∆∞·ªõi boss
def find_join_button_below_boss(boss_x, boss_y, boss_width, boss_height, device_id):
    """
    T√¨m button "join" ngay d∆∞·ªõi boss
    Tr·∫£ v·ªÅ (x, y) n·∫øu t√¨m th·∫•y, None n·∫øu kh√¥ng t√¨m th·∫•y
    """
    try:
        import os
        import cv2
        from utils.adb_utils import take_screenshot
        # find_button_position_advanced ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a trong file n√†y
        
        # Ch·ª•p screenshot
        screenshot_filename = f"current_screen_{device_id.replace(':', '_')}.JPG"
        if not take_screenshot(screenshot_filename, device_id):
            print("‚ùå Kh√¥ng th·ªÉ ch·ª•p screenshot")
            return None
        
        # Load screenshot
        device_folder = f"images/device_{device_id.replace(':', '_')}"
        screenshot_path = os.path.join(device_folder, screenshot_filename)
        
        if not os.path.exists(screenshot_path):
            print(f"‚ùå File screenshot kh√¥ng t·ªìn t·∫°i: {screenshot_path}")
            return None
        
        screenshot = cv2.imread(screenshot_path)
        if screenshot is None:
            print(f"‚ùå Kh√¥ng th·ªÉ ƒë·ªçc screenshot: {screenshot_path}")
            return None
        
        # T√¨m button "join" trong v√πng ngay d∆∞·ªõi boss
        search_region = get_search_region_below_boss(boss_x, boss_y, boss_width, boss_height, screenshot)
        if search_region is None:
            return None
        
        # T√¨m button "join" trong v√πng t√¨m ki·∫øm
        join_button_path = get_button_image_path("join_button")
        if not os.path.exists(join_button_path):
            print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ·∫£nh join_button")
            return None
        
        # T√¨m button "join" trong v√πng t√¨m ki·∫øm
        join_template = cv2.imread(join_button_path)
        if join_template is None:
            print("‚ö†Ô∏è Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh join_button")
            return None
        
        # Template matching trong v√πng t√¨m ki·∫øm
        result = cv2.matchTemplate(search_region, join_template, cv2.TM_CCOEFF_NORMED)
        min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)
        
        if max_val >= 0.75:
            # T√≠nh to√°n t·ªça ƒë·ªô th·ª±c tr√™n m√†n h√¨nh
            actual_x = boss_x + max_loc[0]
            actual_y = boss_y + boss_height + max_loc[1]
            print(f"‚úÖ T√¨m th·∫•y join button t·∫°i ({actual_x}, {actual_y}) v·ªõi ƒë·ªô ch√≠nh x√°c {max_val:.2f}")
            return (actual_x, actual_y)
        else:
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y join button (ƒë·ªô ch√≠nh x√°c cao nh·∫•t: {max_val:.2f})")
            return None
        
    except Exception as e:
        print(f"‚ùå L·ªói trong find_join_button_below_boss: {e}")
        return None

# Khoanh v√πng ph·∫ßn t√¨m ki·∫øm joined v√† join
def get_search_region_below_boss(boss_x, boss_y, boss_width, boss_height, screenshot):
    """
    L·∫•y v√πng t√¨m ki·∫øm ngay d∆∞·ªõi boss
    """
    try:
        # T√≠nh to√°n v√πng t√¨m ki·∫øm ngay d∆∞·ªõi boss
        search_x = max(0, boss_x - 50)  # M·ªü r·ªông 50px v·ªÅ 2 b√™n
        search_y = boss_y + boss_height  # B·∫Øt ƒë·∫ßu t·ª´ d∆∞·ªõi boss
        search_width = min(boss_width + 100, screenshot.shape[1] - search_x)  # M·ªü r·ªông 100px
        search_height = min(200, screenshot.shape[0] - search_y)  # T√¨m trong 200px d∆∞·ªõi boss
        
        # Ki·ªÉm tra v√πng t√¨m ki·∫øm c√≥ h·ª£p l·ªá kh√¥ng
        if search_width <= 0 or search_height <= 0:
            print("‚ùå V√πng t√¨m ki·∫øm kh√¥ng h·ª£p l·ªá")
            return None
        
        # C·∫Øt v√πng t√¨m ki·∫øm t·ª´ screenshot
        search_region = screenshot[search_y:search_y + search_height, search_x:search_x + search_width]
        
        if search_region.size == 0:
            print("‚ùå V√πng t√¨m ki·∫øm r·ªóng")
            return None
        
        print(f"üîç V√πng t√¨m ki·∫øm: ({search_x}, {search_y}) - ({search_width}x{search_height})")
        return search_region
        
    except Exception as e:
        print(f"‚ùå L·ªói trong get_search_region_below_boss: {e}")
        return None
