import time
import random
import os
from utils.image_utils import find_and_click_button, check_button_exists
from utils.adb_utils import swipe_down, swipe_up, ensure_evony_running, adb_command
from utils.language_utils import get_image_path


# ===== CONSTANTS =====
# C√°c n√∫t ƒë·ªÉ m·ªü danh s√°ch items
OPEN_ITEMS_MENU_SEQUENCE = [
    ("open_resource/more", 2),     # Click v√†o more.JPG, ch·ªù 2 gi√¢y
    ("open_resource/things", 1),   # Click v√†o things.JPG, ch·ªù 1 gi√¢y
    ("open_resource/time", 1),     # Click v√†o time.JPG, ch·ªù 1 gi√¢y
    ("open_resource/box", 1)       # Click v√†o box.JPG, ch·ªù 1 gi√¢y
]

# C√°c n√∫t ƒë·ªÉ m·ªü v√† s·ª≠ d·ª•ng item
ITEM_ACTION_SEQUENCE = [
    ("open_resource/open", 2),     # Click v√†o open.JPG, ch·ªù 2 gi√¢y
    ("open_resource/use", 2)    # Click v√†o use.JPG, ch·ªù 1 gi√¢y
]

# Th∆∞ m·ª•c ch·ª©a ·∫£nh items
ITEMS_FOLDER = "images/buttons/open_resource/items"


# ===== HELPER FUNCTIONS =====
def click_button_sequence(buttons, device_id=None, sequence_name="buttons"):
    """Th·ª±c hi·ªán click chu·ªói buttons theo th·ª© t·ª±"""
    try:
        for button_name, wait_time in buttons:
            if not find_and_click_button(button_name, device_id=device_id, wait_time=wait_time, threshold=0.65):
                print(f"Kh√¥ng th·ªÉ t√¨m th·∫•y ho·∫∑c click v√†o n√∫t {button_name}")
                return False
        return True
    except Exception as e:
        print(f"L·ªói trong qu√° tr√¨nh click {sequence_name}: {e}")
        return False


def get_all_item_images():
    """L·∫•y danh s√°ch t·∫•t c·∫£ ·∫£nh items trong th∆∞ m·ª•c"""
    try:
        if not os.path.exists(ITEMS_FOLDER):
            print(f"Th∆∞ m·ª•c {ITEMS_FOLDER} kh√¥ng t·ªìn t·∫°i")
            return []
        
        item_images = []
        for filename in os.listdir(ITEMS_FOLDER):
            if filename.lower().endswith(('.jpg', '.jpeg', '.png')):
                # Lo·∫°i b·ªè extension ƒë·ªÉ t·∫°o t√™n button
                name_without_ext = os.path.splitext(filename)[0]
                item_images.append(f"open_resource/items/{name_without_ext}")
        
        print(f"T√¨m th·∫•y {len(item_images)} ·∫£nh items: {item_images}")
        return item_images
    except Exception as e:
        print(f"L·ªói khi l·∫•y danh s√°ch ·∫£nh items: {e}")
        return []


def find_all_items_in_screen(item_images, device_id=None, threshold=0.77):
    """T√¨m t·∫•t c·∫£ items c√≥ th·ªÉ trong m√†n h√¨nh hi·ªán t·∫°i (parallel detection v·ªõi multi-location)"""
    try:
        found_items = []
        
        # Ch·ª•p screenshot 1 l·∫ßn duy nh·∫•t cho t·∫•t c·∫£ items
        print("üì∏ Ch·ª•p screenshot 1 l·∫ßn cho t·∫•t c·∫£ items...")
        screenshot = get_screenshot_once(device_id)
        if screenshot is None:
            print("‚ùå Kh√¥ng th·ªÉ ch·ª•p screenshot")
            return []
        
        print(f"üîç B·∫Øt ƒë·∫ßu t√¨m ki·∫øm {len(item_images)} lo·∫°i items...")
        
        for item_image in item_images:
            print(f"üîç ƒêang t√¨m item: {item_image}")
            
            # T√¨m t·∫•t c·∫£ v·ªã tr√≠ c·ªßa item n√†y trong screenshot ƒë√£ ch·ª•p
            locations = find_all_locations_in_screenshot(item_image, screenshot, threshold)
            
            for i, location in enumerate(locations):
                # T·∫°o unique identifier cho m·ªói v·ªã tr√≠
                item_with_location = f"{item_image}_pos_{i+1}"
                found_items.append({
                    'name': item_image,
                    'location': location,
                    'unique_id': item_with_location
                })
                print(f"‚úÖ T√¨m th·∫•y item: {item_image} t·∫°i v·ªã tr√≠ {i+1} - {location}")
        
        print(f"üìã T·ªïng c·ªông t√¨m th·∫•y {len(found_items)} items trong m√†n h√¨nh")
        
        # Debug: In ra chi ti·∫øt t·ª´ng item
        for i, item in enumerate(found_items):
            print(f"   Item {i+1}: {item['name']} t·∫°i v·ªã tr√≠ {item['location']} (ID: {item['unique_id']})")
        
        return found_items
    except Exception as e:
        print(f"‚ùå L·ªói khi t√¨m items trong m√†n h√¨nh: {e}")
        return []


def get_screenshot_once(device_id=None):
    """Ch·ª•p screenshot 1 l·∫ßn duy nh·∫•t v√† tr·∫£ v·ªÅ ·∫£nh"""
    try:
        import cv2
        from utils.adb_utils import take_screenshot
        from utils.image_utils import get_screenshot_filename
        
        # Ch·ª•p screenshot
        screenshot_filename = get_screenshot_filename(device_id)
        take_screenshot(screenshot_filename, device_id)
        
        # X√°c ƒë·ªãnh ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß c·ªßa file screenshot
        if device_id:
            screen_path = os.path.join("images", f"device_{device_id.replace(':', '_')}", screenshot_filename)
        else:
            screen_path = os.path.join("images", screenshot_filename)
        
        # Load screenshot
        screenshot = cv2.imread(screen_path)
        if screenshot is None:
            print(f"‚ùå Kh√¥ng th·ªÉ ƒë·ªçc screenshot: {screen_path}")
            return None
        
        print(f"‚úÖ ƒê√£ ch·ª•p screenshot th√†nh c√¥ng: {screen_path}")
        return screenshot
    except Exception as e:
        print(f"‚ùå L·ªói khi ch·ª•p screenshot: {e}")
        return None


def find_all_locations_in_screenshot(item_image, screenshot, threshold=0.8):
    """T√¨m t·∫•t c·∫£ v·ªã tr√≠ c·ªßa m·ªôt lo·∫°i item trong screenshot ƒë√£ c√≥"""
    try:
        import cv2
        import numpy as np
        
        # Load template image using language-aware path
        template_path = get_image_path(f"buttons/{item_image}")
        # Try different extensions
        if not os.path.exists(f"{template_path}.JPG"):
            if not os.path.exists(f"{template_path}.jpg"):
                print(f"‚ùå Kh√¥ng t√¨m th·∫•y template: {template_path}")
                return []
            else:
                template_path = f"{template_path}.jpg"
        else:
            template_path = f"{template_path}.JPG"
        
        template = cv2.imread(template_path)
        if template is None:
            print(f"‚ùå Kh√¥ng th·ªÉ load template: {template_path}")
            return []
        
        # Template matching
        result = cv2.matchTemplate(screenshot, template, cv2.TM_CCOEFF_NORMED)
        locations = np.where(result >= threshold)
        
        print(f"üìä T√¨m th·∫•y {len(locations[0])} v·ªã tr√≠ kh·∫£ nƒÉng cho {item_image}")
        
        # Debug: In ra t·∫•t c·∫£ v·ªã tr√≠ tr∆∞·ªõc khi l·ªçc
        if len(locations[0]) > 0:
            print(f"üîç T·∫•t c·∫£ v·ªã tr√≠ tr∆∞·ªõc khi l·ªçc:")
            for i, pt in enumerate(zip(*locations[::-1])):
                x, y = pt
                confidence = result[y, x]
                print(f"   V·ªã tr√≠ {i+1}: ({x}, {y}) - confidence: {confidence:.3f}")
        
        # L·ªçc c√°c v·ªã tr√≠ g·∫ßn nhau (tr√°nh duplicate)
        filtered_locations = []
        min_distance = 10  # Gi·∫£m kho·∫£ng c√°ch ƒë·ªÉ kh√¥ng b·ªè s√≥t items g·∫ßn nhau
        
        # S·∫Øp x·∫øp theo ƒë·ªô ch√≠nh x√°c (t·ª´ cao xu·ªëng th·∫•p)
        all_locations = []
        for pt in zip(*locations[::-1]):
            x, y = pt
            confidence = result[y, x]  # L·∫•y ƒë·ªô ch√≠nh x√°c t·∫°i v·ªã tr√≠ n√†y
            all_locations.append((x, y, confidence))
        
        # S·∫Øp x·∫øp theo confidence gi·∫£m d·∫ßn
        all_locations.sort(key=lambda x: x[2], reverse=True)
        
        for x, y, confidence in all_locations:
            # Ki·ªÉm tra xem v·ªã tr√≠ n√†y c√≥ qu√° g·∫ßn v·ªõi c√°c v·ªã tr√≠ ƒë√£ c√≥ kh√¥ng
            too_close = False
            for existing_pt in filtered_locations:
                if abs(x - existing_pt[0]) < min_distance and abs(y - existing_pt[1]) < min_distance:
                    too_close = True
                    print(f"‚ö†Ô∏è B·ªè qua v·ªã tr√≠ ({x}, {y}) v√¨ qu√° g·∫ßn v·ªõi ({existing_pt[0]}, {existing_pt[1]})")
                    break
            
            if not too_close:
                filtered_locations.append((x, y))
                print(f"‚úÖ Th√™m v·ªã tr√≠: ({x}, {y}) v·ªõi confidence: {confidence:.3f}")
        
        print(f"‚úÖ L·ªçc ƒë∆∞·ª£c {len(filtered_locations)} v·ªã tr√≠ cu·ªëi c√πng cho {item_image}")
        return filtered_locations
    except Exception as e:
        print(f"‚ùå L·ªói khi t√¨m v·ªã tr√≠ c·ªßa item {item_image}: {e}")
        return []




def process_found_items(found_items, device_id=None):
    """X·ª≠ l√Ω tu·∫ßn t·ª± c√°c items ƒë√£ t√¨m th·∫•y (v·ªõi multi-location support)"""
    try:
        items_processed = 0
        total_items = len(found_items)
        
        print(f"üìã B·∫Øt ƒë·∫ßu x·ª≠ l√Ω {total_items} items...")
        
        for i, item_data in enumerate(found_items):
            item_name = item_data['name']
            item_location = item_data['location']
            unique_id = item_data['unique_id']
            
            print(f"üîÑ [{i+1}/{total_items}] ƒêang x·ª≠ l√Ω item: {item_name} t·∫°i v·ªã tr√≠ {item_location} (ID: {unique_id})")
            
            # Click v√†o item t·∫°i v·ªã tr√≠ c·ª• th·ªÉ
            if click_item_at_location(item_name, item_location, device_id):
                print(f"‚úÖ ƒê√£ click v√†o item: {item_name} t·∫°i v·ªã tr√≠ {item_location}")
                
                # Click open v√† use
                if click_button_sequence(ITEM_ACTION_SEQUENCE, device_id, "item action"):
                    print(f"‚úÖ ƒê√£ m·ªü v√† s·ª≠ d·ª•ng item: {item_name} t·∫°i v·ªã tr√≠ {item_location}")
                    items_processed += 1
                    
                    # Ch·ªù t√†i nguy√™n load
                    print("‚è≥ Ch·ªù t√†i nguy√™n load...")
                    time.sleep(2)
                    
                    # Nh·∫•n ESC ƒë·ªÉ ƒë√≥ng dialog
                    press_escape()
                    time.sleep(0.5)
                else:
                    print(f"‚ùå Kh√¥ng th·ªÉ m·ªü/s·ª≠ d·ª•ng item: {item_name} t·∫°i v·ªã tr√≠ {item_location}")
            else:
                print(f"‚ùå Kh√¥ng th·ªÉ click v√†o item: {item_name} t·∫°i v·ªã tr√≠ {item_location}")
        
        print(f"üìä Ho√†n th√†nh x·ª≠ l√Ω: {items_processed}/{total_items} items th√†nh c√¥ng")
        return items_processed
    except Exception as e:
        print(f"‚ùå L·ªói khi x·ª≠ l√Ω items: {e}")
        return 0


def click_item_at_location(item_name, location, device_id=None):
    """Click v√†o item t·∫°i v·ªã tr√≠ c·ª• th·ªÉ"""
    try:
        x, y = location
        # Click tr·ª±c ti·∫øp t·∫°i t·ªça ƒë·ªô
        adb_command(f'adb shell input tap {x} {y}')
        time.sleep(0.3)
        return True
    except Exception as e:
        print(f"‚ùå L·ªói khi click t·∫°i v·ªã tr√≠ {location}: {e}")
        return False


def scroll_down_small():
    """K√©o m√†n h√¨nh xu·ªëng 150px (t·ªëi ∆∞u cho parallel detection)"""
    try:
        adb_command('adb shell input swipe 300 300 300 150 100')
        time.sleep(1)
        return True
    except Exception as e:
        print(f"L·ªói khi k√©o m√†n h√¨nh xu·ªëng: {e}")
        return False


def press_escape():
    """Nh·∫•n ph√≠m ESC"""
    try:
        adb_command('adb shell input keyevent KEYCODE_ESCAPE')
        time.sleep(0.5)
        return True
    except Exception as e:
        print(f"L·ªói khi nh·∫•n ESC: {e}")
        return False


def ensure_outside_screen():
    """ƒê·∫£m b·∫£o ƒëang ·ªü ngo√†i c√πng m√†n h√¨nh b·∫±ng c√°ch ESC cho ƒë·∫øn khi th·∫•y cancel button"""
    try:
        attempt = 0
        while True:
            attempt += 1
            if check_button_exists("cancel", device_id=None, threshold=0.7):
                print("‚úÖ ƒê√£ ·ªü ngo√†i c√πng m√†n h√¨nh (th·∫•y cancel button)")
                # Click v√†o cancel ƒë·ªÉ ƒë·∫£m b·∫£o ·ªü ngo√†i c√πng
                if find_and_click_button("cancel", device_id=None, wait_time=1, threshold=0.8):
                    print("‚úÖ ƒê√£ click cancel, ho√†n th√†nh qu√° tr√¨nh v·ªÅ ngo√†i c√πng")
                    return True
                else:
                    print("‚ö†Ô∏è Kh√¥ng th·ªÉ click cancel, ti·∫øp t·ª•c ESC...")
            
            print(f"üîÑ L·∫ßn {attempt}: Nh·∫•n ESC ƒë·ªÉ v·ªÅ ngo√†i c√πng m√†n h√¨nh...")
            press_escape()
            time.sleep(1)
        
    except Exception as e:
        print(f"‚ùå L·ªói khi ƒë·∫£m b·∫£o ·ªü ngo√†i c√πng m√†n h√¨nh: {e}")
        return False


def check_in_chest_screen():
    """Ki·ªÉm tra xem c√≥ ƒëang trong m√†n h√¨nh m·ªü item kh√¥ng"""
    try:
        return check_button_exists("open_resource/in_chest", device_id=None, threshold=0.8)
    except Exception as e:
        print(f"‚ùå L·ªói khi ki·ªÉm tra m√†n h√¨nh in_chest: {e}")
        return False


# ===== MAIN FUNCTIONS =====
def open_items_sequence(device_id=None):
    """Th·ª±c hi·ªán chu·ªói h√†nh ƒë·ªông m·ªü items theo quy tr√¨nh m·ªõi"""
    try:
        print("üîÑ B·∫Øt ƒë·∫ßu quy tr√¨nh m·ªü items...")
        
        # B∆∞·ªõc 0: ƒê·∫£m b·∫£o ·ªü ngo√†i m√†n h√¨nh ch√≠nh tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu
        print("üìã B∆∞·ªõc 0: ƒê·∫£m b·∫£o ·ªü ngo√†i m√†n h√¨nh ch√≠nh...")
        if not ensure_outside_screen():
            print("‚ùå Kh√¥ng th·ªÉ v·ªÅ ngo√†i m√†n h√¨nh ch√≠nh")
            return False
        
        # B∆∞·ªõc 1: M·ªü menu items (more -> things -> time -> box)
        print("üìã B∆∞·ªõc 1: M·ªü menu items...")
        if not click_button_sequence(OPEN_ITEMS_MENU_SEQUENCE, device_id, "open items menu"):
            print("‚ùå Kh√¥ng th·ªÉ m·ªü menu items")
            return False
        
        # B∆∞·ªõc 2: L·∫•y danh s√°ch t·∫•t c·∫£ ·∫£nh items
        print("üìã B∆∞·ªõc 2: L·∫•y danh s√°ch ·∫£nh items...")
        item_images = get_all_item_images()
        if not item_images:
            print("‚ùå Kh√¥ng t√¨m th·∫•y ·∫£nh items n√†o")
            return False
        
        # B∆∞·ªõc 3: Duy·ªát v√† m·ªü t·∫•t c·∫£ items (Parallel Detection v·ªõi logic c≈©)
        print("üìã B∆∞·ªõc 3: Duy·ªát v√† m·ªü items v·ªõi parallel detection...")
        items_processed = 0
        consecutive_empty_scrolls = 0  # ƒê·∫øm s·ªë l·∫ßn scroll li√™n ti·∫øp kh√¥ng t√¨m th·∫•y item
        scroll_count = 0  # ƒê·∫øm t·ªïng s·ªë l·∫ßn scroll
        
        while True:  # V√≤ng l·∫∑p v√¥ h·∫°n cho ƒë·∫øn khi d·ª´ng theo ƒëi·ªÅu ki·ªán
            print(f"üîç L·∫ßn scroll {scroll_count + 1}: Qu√©t m√†n h√¨nh ƒë·ªÉ t√¨m items...")
            
            # Qu√©t 1 l∆∞·ª£t t√¨m t·∫•t c·∫£ items trong m√†n h√¨nh hi·ªán t·∫°i
            found_items = find_all_items_in_screen(item_images, device_id, threshold=0.8)
            
            if found_items:
                print(f"üìã T√¨m th·∫•y {len(found_items)} items, b·∫Øt ƒë·∫ßu x·ª≠ l√Ω...")
                
                # X·ª≠ l√Ω tu·∫ßn t·ª± c√°c items ƒë√£ t√¨m th·∫•y
                items_processed_in_scroll = process_found_items(found_items, device_id)
                items_processed += items_processed_in_scroll
                
                # Reset counter v√¨ t√¨m th·∫•y items
                consecutive_empty_scrolls = 0
                print(f"‚úÖ ƒê√£ x·ª≠ l√Ω {items_processed_in_scroll} items trong l·∫ßn scroll {scroll_count + 1}")
            else:
                consecutive_empty_scrolls += 1
                print(f"üìã Kh√¥ng t√¨m th·∫•y item n√†o trong l·∫ßn scroll {scroll_count + 1} (l·∫ßn li√™n ti·∫øp: {consecutive_empty_scrolls})")
            
            # TƒÉng s·ªë l·∫ßn scroll
            scroll_count += 1
            
            # Ki·ªÉm tra ƒëi·ªÅu ki·ªán d·ª´ng: 3 l·∫ßn scroll li√™n ti·∫øp kh√¥ng t√¨m th·∫•y item
            if consecutive_empty_scrolls >= 3:
                print("üìã ƒê√£ k√©o xu·ªëng 3 l·∫ßn li√™n ti·∫øp m√† kh√¥ng t√¨m th·∫•y item n√†o")
                print("üìã ƒêang ra ngo√†i m√†n h√¨nh ch√≠nh...")
                if ensure_outside_screen():
                    print("‚úÖ ƒê√£ v·ªÅ ngo√†i m√†n h√¨nh ch√≠nh, k·∫øt th√∫c quy tr√¨nh")
                else:
                    print("‚ö†Ô∏è Kh√¥ng th·ªÉ v·ªÅ ngo√†i m√†n h√¨nh ch√≠nh, nh∆∞ng v·∫´n k·∫øt th√∫c quy tr√¨nh")
                break
            
            # Scroll ti·∫øp n·∫øu ch∆∞a ƒë·∫°t ƒëi·ªÅu ki·ªán d·ª´ng
            # Ki·ªÉm tra xem c√≥ ƒëang trong m√†n h√¨nh m·ªü item kh√¥ng
            if check_in_chest_screen():
                print("üìã ƒêang trong m√†n h√¨nh m·ªü item, k√©o m√†n h√¨nh xu·ªëng...")
                scroll_down_small()
                print("‚è≥ Ch·ªù m√†n h√¨nh ·ªïn ƒë·ªãnh sau khi scroll...")
                time.sleep(2)  # Ch·ªù 2 gi√¢y ƒë·ªÉ m√†n h√¨nh ·ªïn ƒë·ªãnh
            else:
                print("üìã Kh√¥ng trong m√†n h√¨nh m·ªü item, c·∫ßn v√†o l·∫°i menu items...")
                # Nh·∫•n ESC ƒë·ªÉ ƒë√≥ng menu hi·ªán t·∫°i
                press_escape()
                time.sleep(1)
                
                # V√†o l·∫°i menu items
                if click_button_sequence(OPEN_ITEMS_MENU_SEQUENCE, device_id, "reopen items menu"):
                    print("‚úÖ ƒê√£ v√†o l·∫°i menu items")
                    print("‚è≥ Ch·ªù m√†n h√¨nh ·ªïn ƒë·ªãnh sau khi v√†o menu...")
                    time.sleep(2)  # Ch·ªù 2 gi√¢y ƒë·ªÉ m√†n h√¨nh ·ªïn ƒë·ªãnh
                else:
                    print("‚ùå Kh√¥ng th·ªÉ v√†o l·∫°i menu items")
                    break
        
        print(f"‚úÖ Ho√†n th√†nh quy tr√¨nh m·ªü items. T·ªïng c·ªông ƒë√£ x·ª≠ l√Ω: {items_processed} items")
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói trong qu√° tr√¨nh m·ªü items: {e}")
        return False


def continue_open_items_sequence(device_id=None):
    """Th·ª±c hi·ªán chu·ªói h√†nh ƒë·ªông m·ªü items (t∆∞∆°ng t·ª± open_items_sequence)"""
    return open_items_sequence(device_id)


def open_items_selective_sequence(device_id=None):
    """Th·ª±c hi·ªán chu·ªói h√†nh ƒë·ªông m·ªü items c√≥ ch·ªçn l·ªçc (t∆∞∆°ng t·ª± open_items_sequence)"""
    return open_items_sequence(device_id)


def continue_open_items_selective_sequence(device_id=None):
    """Th·ª±c hi·ªán chu·ªói h√†nh ƒë·ªông m·ªü items c√≥ ch·ªçn l·ªçc (t∆∞∆°ng t·ª± open_items_sequence)"""
    return open_items_sequence(device_id)
